
debug = boolean(default=False)

template_dir = string(default="%(module_root)s/templates")
plugins_dir = string(default="%(root)s/plugins")
priority_plugins = string_list(default=list())

default_url = string(default="/list_plugins")
default_url_priority = integer(default=0)

ca = string(default="")
client_key = string(default="")
client_cert = string(default="")
ssl_version = string(default="PROTOCOL_TLSv1")

ws.thread_pool = integer(default=25)
ws.call_timeout = integer(default=10) # seconds
ws.poll_interval = integer(default=300) # seconds
ws.reconnect_interval = integer(default=60) # seconds
ws.auth_required = boolean(default=True)

ldap.url = string(default="")
ldap.basedn = force_list(default="")
ldap.userattr = string(default="uid")
ldap.start_tls = boolean(default=True)
ldap.cacert = string(default="")
ldap.cert = string(default="")
ldap.key = string(default="")

# Sideboard has numerous background threads which wait on sideboard.lib.stopped
# to either sleep or bail immediately on shutdown.  Since these threads wait in
# a loop, we don't want to set an interval too small or we'll eat a lot of CPU
# while doing absolutely nothing.  A hard-coded value of 1 second would probably
# be fine for all workloads, but we've made it configurable just in case.
thread_wait_interval = float(default=1)


[plugins]
sqlite_dir = string(default="%(root)s/db")


[cherrypy]
engine.autoreload.on = boolean(default=False)

server.socket_host = string(default="127.0.0.1")
server.socket_port = integer(default=8282)

tools.reset_threadlocal.on = boolean(default=True)

tools.sessions.on = boolean(default=True)
tools.sessions.path = string(default="/")
tools.sessions.timeout = integer(default=30)
tools.sessions.storage_type = string(default="file")
tools.sessions.storage_path = string(default="%(root)s/data/sessions")
tools.sessions.secure = boolean(default=False)

checker.check_skipped_app_config = boolean(default=False)


[rpc_services]
___many___ = string

[[__many__]]
jsonrpc_only = boolean(default=False)


[loggers]
root = option("TRACE", "DEBUG", "INFO", "WARN", "WARNING", "ERROR", "CRITICAL", default="DEBUG")
cherrypy.error = option("TRACE", "DEBUG", "INFO", "WARNING", "WARN", "ERROR", "CRITICAL", default="DEBUG")
cherrypy.access = option("TRACE", "DEBUG", "INFO", "WARNING", "WARN", "ERROR", "CRITICAL", default="CRITICAL")
__many__ = option("TRACE", "DEBUG", "INFO", "WARN", "WARNING", "ERROR", "CRITICAL", default="INFO")

[handlers]
[[__many__]]
formatter = string(default="default")
___many___ = string()

[formatters]
[[default]]
format = string(default="$$(asctime)s [$$(levelname)s] $$(name)s: $$(message)s")
datefmt = string(default="")
[[__many__]]
format = string
datefmt = string(default="")
